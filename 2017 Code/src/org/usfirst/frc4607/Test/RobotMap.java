// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4607.Test;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.TalonSRX;
import edu.wpi.first.wpilibj.VictorSP;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATION
    public static SpeedController drivetrainRight;
    public static SpeedController drivetrainLeft;
    public static RobotDrive drivetrainRobotDrive;
    public static SpeedController climberRightMotor;
    public static SpeedController climberLeftMotor;
    public static RobotDrive climberRobotDrive21;
    public static Servo cogCollectorkickerServo;
    public static SpeedController shooterShooterMotor;
    public static SpeedController shooterShooterFeed;
    public static Encoder shooterQuadratureEncoder;
    public static SpeedController intakeMechIntakeMotor;
    public static PowerDistributionPanel pdp;
    public static Servo cogCollectorLinearServo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
    	pdp = new PowerDistributionPanel();
    	pdp.clearStickyFaults();
    	
    	cogCollectorLinearServo = new Servo(6);
    	LiveWindow.addActuator("CogCollector","Linear", (Servo) cogCollectorLinearServo);
    	
    	
        drivetrainRight = new Spark(2);
        LiveWindow.addActuator("Drivetrain", "Right", (Spark) drivetrainRight);
        
        drivetrainLeft = new Spark(3);
        LiveWindow.addActuator("Drivetrain", "Left", (Spark) drivetrainLeft);
        
        drivetrainRobotDrive = new RobotDrive(drivetrainLeft,drivetrainRight);
        
        drivetrainRobotDrive.setSafetyEnabled(false);
        drivetrainRobotDrive.setExpiration(0.1);
        drivetrainRobotDrive.setSensitivity(0.5);
        drivetrainRobotDrive.setMaxOutput(1.0);
        
        shooterShooterFeed = new Spark(4);
       // LiveWindow.addActuator("Shooter", "Feed", (VictorSP) shooterShooterFeed);
        
        
        climberLeftMotor = new Talon(0);
        LiveWindow.addActuator("Climber", "Left Motor", (Talon) climberLeftMotor);
        
        cogCollectorkickerServo = new Servo(7);
        LiveWindow.addActuator("Cog Collector", "Double Solenoid", cogCollectorkickerServo);
        
        shooterShooterMotor = new Talon(5);
        LiveWindow.addActuator("Shooter", "ShooterMotor", (Talon) shooterShooterMotor);
        
        shooterQuadratureEncoder = new Encoder(11, 12, false, EncodingType.k4X);
        LiveWindow.addSensor("Shooter", "Quadrature Encoder ", shooterQuadratureEncoder);
        shooterQuadratureEncoder.setDistancePerPulse(1.0);
        shooterQuadratureEncoder.setPIDSourceType(PIDSourceType.kRate);
        intakeMechIntakeMotor = new Spark(1);
        LiveWindow.addActuator("IntakeMech", "IntakeMotor", (Spark) intakeMechIntakeMotor);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
