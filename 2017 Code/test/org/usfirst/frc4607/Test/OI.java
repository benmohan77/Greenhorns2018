// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4607.Test;

import org.usfirst.frc4607.Test.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc4607.Test.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton reverseOrientation;
    public Joystick driver;
    public JoystickButton openCogCollectorDoor;
    public JoystickButton cogCollectorOpen;
    public JoystickButton climb;
    public JoystickButton shoot;
    public JoystickButton intake;
    public JoystickButton feed;
    public JoystickButton reverseIntake;
    public Joystick copilot;
    
    //Driver Buttons
    int shootButton = 8;  //In general this is not used
    int reverseButton = 1;
    int intakeButton = 3;
    int outtakeButton = 4;

    
    //Operator Buttons
    int feedButton = 2;
    int cogButton = 8;
    //Copilot uses lever to control shooter speed



    public OI() {
    	driver = new Joystick(0);
        copilot = new Joystick(1);
//        
        shoot = new JoystickButton(driver, shootButton);
   //     shoot.whileHeld(new Shooting());
        feed = new JoystickButton(copilot, feedButton);
        feed.whenPressed(new FeedingCommand(-1));
        feed.whenReleased(new FeedingCommand(0));
        cogCollectorOpen = new JoystickButton(copilot, cogButton);
        cogCollectorOpen.whenPressed(new gateCommandGroup());  //:ok_hand: :ok_hand: :100: :100:
        intake = new JoystickButton(copilot, intakeButton);
        intake.whenPressed(new Intake(-1));
        intake.whenReleased(new Intake(0));
        reverseIntake = new JoystickButton(copilot, outtakeButton);
        reverseIntake.whenPressed(new Intake(.3));
        reverseIntake.whenReleased(new Intake(0));
        
        
        reverseOrientation = new JoystickButton(driver, reverseButton);
        reverseOrientation.whenPressed(new ChangeOrientation());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("ChangeOrientation", new ChangeOrientation());
        SmartDashboard.putData("Driving", new Driving());
        SmartDashboard.putData("CogCollectorControl", new gateCommandGroup());
        SmartDashboard.putData("ClimberControl", new ClimberControl());
        SmartDashboard.putData("Intake", new Intake(0));
     SmartDashboard.putData("Shooting", new Shooting());

    }

    public Joystick getDriver() {
        return driver;
    }

    public Joystick getCopilot() {
        return copilot;
    }

}

