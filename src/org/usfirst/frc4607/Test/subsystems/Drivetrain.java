// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4607.Test.subsystems;

import org.usfirst.frc4607.Test.RobotMap;
import org.usfirst.frc4607.Test.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Drivetrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController Right = RobotMap.drivetrainRight;
    private final SpeedController Left = RobotMap.drivetrainLeft;
    private final RobotDrive robotDrive = RobotMap.drivetrainRobotDrive;
    private double orientation = -1;
    private double x, y;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    		setDefaultCommand(new Driving());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void Drive(Joystick joy){
   x = joy.getZ();
   y = joy.getY() * orientation;
    	// 	x = SmoothMotion(x, joy.getX(), .07);
    //	y = SmoothMotion(y, joy.getY(), .07);
    	RobotMap.drivetrainRobotDrive.arcadeDrive(y, x, false);
    }
    
    public void ChangeOrientation(){
    	orientation *= -1;
    }
    public double SmoothMotion(double initialSpeed, double setSpeed, double accelLim){
 	   double speed, accelSign;
 	   if(initialSpeed > setSpeed){
 		   accelSign= -1;
 	   }
 	   else{
 		   accelSign = 1;
 	   }
 	   if(Math.abs(Math.abs(initialSpeed)-Math.abs(setSpeed)) > accelLim){
 		   speed = initialSpeed + accelLim* accelSign;
 	   }
 	   else{
 		   speed = setSpeed;
 	   }
 	   return speed;
    }
    
}

